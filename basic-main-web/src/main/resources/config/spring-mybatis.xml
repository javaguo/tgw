<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
    <!-- 自动扫描-->
    <context:component-scan base-package="com.tgw" >
        <!-- spring配置不扫描controller注解；扫描service注解。按照此方式配置，spring的aop事务配置才起作用。 -->
        <!-- aop事务不回滚问题解决方法，参考：http://www.cnblogs.com/qiumingcheng/p/5912321.html -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:config/jdbc.properties" />  
    </bean>  
  
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
    </bean>
  
    <!-- spring和MyBatis整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <!-- <property name="mapperLocations" value="classpath:com/tgw/bean/mapping/*.xml"></property> -->
        
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />
    </bean>
      <!--
  	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.tgw.dao" />
	</bean>
-->
    <!--  -->
        <bean id="baseModelMapperScannerConfigurer" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
            <property name="basePackage" value="com.tgw"/>

            <property name="markerInterface" value="com.tgw.basic.framework.dao.BaseModelMapper" />

        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                INDENTITY=MYSQL
            </value>
        </property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.tgw.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    -->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    <!-- 有两种配置事务回滚的方式，一种是注解式，另一种是aop切面，二选一即可 -->

    <!--使用注释事务-->
    <!--<tx:annotation-driven  transaction-manager="transactionManager" />-->

    <!-- 下面使用aop切面的方式来实现事务管理 -->
    <!-- 使用aop切面时为保证事务可以回滚，需要注意component-scan配置，详情参考http://www.cnblogs.com/qiumingcheng/p/5912321.html -->
    <tx:advice id="commonAdvice" transaction-manager="transactionManager">
        <!--配置事务传播性，隔离级别以及超时回滚等问题 -->
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"  />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--配置事务切点-->
        <aop:pointcut id="services" expression="execution(* com.tgw..*.service..*.*(..))" />
        <aop:advisor pointcut-ref="services" advice-ref="commonAdvice" />
    </aop:config>

</beans> 